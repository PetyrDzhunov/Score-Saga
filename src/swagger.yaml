openapi: 3.0.0
info:
  title: Score Saga API documentation
  version: 0.1
  description: This is an API made with Express and documented with Swagger
  contact:
    email: petar.dzhunov94@gmail.com
servers:
  - url: http://localhost:3000/

paths:
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users.
      tags:
        - User
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Register a new user
      description: Register a new user with the provided information.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                avatar:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
  /users/login:
    post:
      summary: Login user
      description: Login user with the provided credentials.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                usernameOrEmail:
                  type: string
                password:
                  type: string
              required:
                - usernameOrEmail
                - password
      responses:
        '201':
          description: User logged in successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
  /users/{id}:
    get:
      summary: Get a user by ID
      description: Retrieve a user by their ID.
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user by ID
      description: Delete a user by their ID.
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user to delete.
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully.
  /users/{id}/predictions:
    get:
      summary: Get predictions by user ID
      description: Retrieve predictions associated with a user by their ID.
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user to retrieve predictions for.
          schema:
            type: string
      responses:
        '200':
          description: Predictions retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prediction'
  /predictions:
    get:
      security:
        - bearerAuth: []
      summary: Get all predictions
      description: Retrieve a list of all predictions.
      tags:
        - Predictions
      responses:
        '200':
          description: A list of predictions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prediction'
    post:
      security:
        - bearerAuth: []
      summary: Create a new prediction
      description: Create a new prediction with the provided information.
      tags:
        - Predictions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PredictionInput'
      responses:
        '201':
          description: Prediction created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prediction'
        '400':
          description: Bad Request. Invalid prediction data provided.
        '404':
          description: Not Found. User or match not found.
        '409':
          description: Conflict. User can have only one prediction per match.
    put:
      security:
        - bearerAuth: []
      summary: Update prediction
      description: Update prediction with the provided information.
      tags:
        - Predictions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PredictionInput'
      responses:
        '201':
          description: Prediction created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prediction'
        '400':
          description: Bad Request. Invalid prediction data provided.
        '404':
          description: Not Found. User or match not found.
        '409':
          description: Conflict. User can have only one prediction per match.
  /predictions/{id}: # Updated endpoint path
    delete:
      security:
        - bearerAuth: []
      summary: Delete a prediction by ID
      description: Delete a prediction by its ID.
      tags:
        - Predictions
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the prediction to delete.
          schema:
            type: string
      responses:
        '204':
          description: Prediction deleted successfully.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user.
        username:
          type: string
          description: The username of the user.
        email:
          type: string
          format: email
          description: The email address of the user.
        password:
          type: string
          description: The password of the user.
        avatar:
          type: string
          description: The avatar URL of the user.
        createdAt:
          type: string
          format: date-time
          description: The creation date of the user.
        updatedAt:
          type: string
          format: date-time
          description: The last update date of the user.
    Prediction:
      type: object
      properties:
        id:
          type: string
          description: The ID of the prediction.
        prediction:
          type: string
          description: The prediction value.
        createdAt:
          type: string
          format: date-time
          description: The creation date of the prediction.
        updatedAt:
          type: string
          format: date-time
          description: The last update date of the prediction.
    PredictionInput:
      type: object
      properties:
        userId:
          type: string
          description: The ID of the user making the prediction.
        prediction:
          type: string
          description: The prediction value.
        matchId:
          type: string
          description: The ID of the match for which the prediction is made.
      required:
        - userId
        - prediction
        - matchId
